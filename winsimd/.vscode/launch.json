{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387

    // https://github.com/microsoft/vscode-cmake-tools/blob/main/docs/debug-launch.md
    // https://github.com/microsoft/vscode-cmake-tools/issues/2533
    // https://medium.com/@ivan.mejia/c-development-using-visual-studio-code-cmake-and-lldb-d0f13d38c563
    // https://github.com/microsoft/vscode-cpptools/issues/8644
    // https://github.com/microsoft/vscode-cmake-tools/issues/412

    "version": "0.2.0",
    "configurations": [

        {
            "name": "(gdb) Launch",
            "type": "cppdbg",
            "request": "launch",
            // Resolved by CMake Tools:
            "program": "${command:cmake.launchTargetPath}",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [
                {
                    // add the directory where our target was built to the PATHs
                    // it gets resolved by CMake Tools:
                    "name": "PATH",
                    "value": "${env:PATH}:${command:cmake.getLaunchTargetDirectory}"
                }
                /*
                ,
                {
                    "name": "OTHER_VALUE",
                    "value": "Something something"
                }
                //*/
            ],
            "externalConsole": true,
            "MIMode": "gdb",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ]
        }
        ,
        {
            "name": "(lldb) Launch",
            "type": "lldb",
            "request": "launch",
            // Resolved by CMake Tools:
            "program": "${command:cmake.launchTargetPath}",
            "args": [],
            //"stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            //"environment": [
                //{
                    // add the directory where our target was built to the PATHs
                    // it gets resolved by CMake Tools:
                    //"name": "PATH",
                    //"value": "${env:PATH}:${command:cmake.getLaunchTargetDirectory}"
                //}
            //],
            //"externalConsole": false,
            //"miDebuggerPath": "/usr/bin/lldb",
            //"miDebuggerPath": "/usr/bin/lldb",
            //"MIMode": "lldb"
        }
        ,
        {
            "name": "(msvc) Launch",
            "type": "cppvsdbg",
            "request": "launch",
            // Resolved by CMake Tools:
            "program": "${command:cmake.launchTargetPath}",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [
                {
                    // add the directory where our target was built to the PATHs
                    // it gets resolved by CMake Tools:
                    "name": "PATH",
                    "value": "${env:PATH}:${command:cmake.getLaunchTargetDirectory}"
                }
                /*
                ,
                {
                    "name": "OTHER_VALUE",
                    "value": "Something something"
                }
                //*/
            ],
            "externalConsole": true
        }

        /*
        {
            "name": "C/C++: clang++ build and debug active file",
            "type": "cppdbg",
            "request": "launch",
            "program": "${fileDirname}/${fileBasenameNoExtension}",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${fileDirname}",
            "environment": [],
            "externalConsole": true,
            "MIMode": "lldb"
            //,
            //"preLaunchTask": "CMake: build"
            //"preLaunchTask": "C/C++: clang++ build active file"

        }
        //*/

    ]
}